-----------------------------------------------------------

# imports

import numpy as np
import pandas as pd
import plotly.express as px

import plotly.io
plotly.io.templates.default = "plotly_white"
import plotly
plotly.offline.init_notebook_mode()


-----------------------------------------------------------

# helpers.py

import numpy as np
import pandas as pd
import plotly.express as px
from sklearn.metrics import mean_absolute_error, r2_score

def draw_estimation_scatterplot(model, X, y):
    predictions = model.predict(X)
    mae, r2 = mean_absolute_error(y, predictions), r2_score(y, predictions)
    plot_data = pd.DataFrame({'MEDV': y, 'predictions': predictions})
    return px.scatter(plot_data, x='MEDV', y='predictions', title=f"MAE:{mae:.2f}  R2:{r2:.2f}")


-----------------------------------------------------------

# plot residual learning

@interact(iteration=(0, gbt.n_estimators, 1))
def plot_residual_prediction(iteration):
    estimated_residuals = gbt.init_.predict(X_train)
    residuals = y_train - estimated_residuals
    
    for i in range(iteration):
        tree = gbt.estimators_.ravel()[i]
        estimated_residuals = tree.predict(X_train)
        residuals = residuals - estimated_residuals * gbt.learning_rate
    
    return px.scatter(x=estimated_residuals, y=residuals,
                      title=f'Residuals at iteration {iteration}',
                      labels=dict(x='estimated residuals',y='residuals'))

-----------------------------------------------------------

# zip importances

def zip_importances(importances, column_names):
    zipped = list(zip(column_names, importances))
    zipped.sort(key=lambda x: x[1], reverse=True)
    return zipped

-----------------------------------------------------------